import java.net.Socket;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

/*
 * This class is responsible for taking the information generated by the Messanger class and
 * 		translating it into something that the rest of the game can use.
 */

public class ServersideExecution { 

private static JSONObject serverObject; //This is the JSON given by the server
private static JSONObject clientObject;

private static boolean ServerWaiting;
	
	public static void onStartup()
	{
		ServerWaiting=false; //if it's not waiting on the server, it's waiting on the client.
		clientObject=Messanger.genStartClientObject();
		serverObject=Messanger.genStartServerObject();
	}
	
	private static void checkServer() 
	{
		//This will set the static variable serverObject
		JSONObject serverOBJ=Messanger.getFromServer();
		
		System.out.println((int)serverObject.get("Night"));
		System.out.println((int)serverOBJ.get("Night"));
		
		if((int)serverObject.get("Night")!=(int)serverOBJ.get("Night"))
		{
			serverObject=serverOBJ;
			//for each in the serverObject body, create an ActionLog, then execute the ALL.
			ActionLog.startUp();
			System.out.println("serverObject: "+serverObject.toJSONString());
			//System.out.println("get body: "+serverObject.get("body"));
			JSONArray temp=(JSONArray)serverObject.get("Body");
			for(Object ob : temp)
				new ActionLog((JSONObject)ob);
			ActionLog.execute();
			ActionLog.TearDown();
			ServerWaiting=false;
		}
		
	}
	
	public static void onUpdate() //called each update. Checks to see the current state of communication.
	{
		System.out.println("Break 1");
		if(ServerWaiting)
			checkServer();
		else
			checkClient();
	}
	
	public static JSONObject getClient()
	{
		return clientObject;
	}
	
	public static JSONObject getServer()
	{
		return serverObject;
	}
	
	private static void checkClient() 
	{
		//This will require the implementation of player controls.
		JSONObject clientOBJ=Messanger.getFromClient();
		
		if((int)clientOBJ.get("Night")!=(int)clientObject.get("Night"))
		{
			clientObject=clientOBJ;
			ServerWaiting=true;
			sendToServer();
		}
	}
	private static void sendToServer()
	{
		//This is null for the stubbed version.
	}

}

